type Query {
  getAllUsers(
    limit: Count!
    offset: Count!
    sortBy: UserSortBy!
    sortDirection: String!
  ): UserPaginatedResuslts!

  getUser(id: ID!): User!
}

enum UserSortBy {
  id
  firstName
  lastName
}

type UserPaginatedResuslts {
  count: Count!
  records: [User!]!
}

type User {
  uuid: ID!
  firstName: NonemptyString!
  lastName: NonemptyString!
  email: NonemptyString!
  password: NonemptyString!
  role: NonemptyString!
  createdAt: NonemptyString!
  updatedAt: NonemptyString!
}

input UserInput {
  firstName: NonemptyString!
  lastName: NonemptyString!
  email: NonemptyString!
  password: NonemptyString!
  role: NonemptyString!
}

type AuthPayLoad {
  token: NonemptyString!
}

input UserLoginInput {
  email: NonemptyString!
  password: NonemptyString!
}

type UserAuthResuslts {
  user: User!
  token: AuthPayLoad!
}

type Mutation {
  createUser(input: UserInput!): UserAuthResuslts!
  loginUser(input: UserLoginInput!): UserAuthResuslts!
  updateUser(uuid: Uuid!, input: UserInput!): UserAuthResuslts!
}
